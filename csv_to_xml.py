import csv
from xml.etree.ElementTree import Element, SubElement, tostring, ElementTree
from datetime import datetime
from dateutil import parser as date_parser
import iso8601
import re

CSV_FILE = "tal_episodes.csv"
XML_FILE = "feed.xml"

def is_repeat(pub_date_str, release_date_str):
    try:
        pub_date = date_parser.parse(pub_date_str)
        release_date = date_parser.parse(release_date_str)
        return pub_date.isocalendar()[1] != release_date.isocalendar()[1]  # compare ISO week numbers
    except Exception:
        return False

def sort_key(row):
    date_str = row['pubDate'].strip() or row['releaseDate'].strip()
    try:
        return date_parser.parse(date_str)
    except Exception:
        return datetime.min

def main():
    with open(CSV_FILE, newline="", encoding="utf-8") as f:
        reader = list(csv.DictReader(f))

    rows = sorted(reader, key=sort_key, reverse=True)

    rss = Element('rss', version="2.0", attrib={"xmlns:itunes": "http://www.itunes.com/dtds/podcast-1.0.dtd"})
    channel = SubElement(rss, 'channel')
    SubElement(channel, 'title').text = "This American Archive"
    SubElement(channel, 'link').text = "https://www.thisamericanlife.org"
    SubElement(channel, 'description').text = "Autogenerated feed of the This American Life archive."
    SubElement(channel, 'language').text = "en"
    SubElement(channel, 'copyright').text = "Copyright Â© Ira Glass / This American Life"
    SubElement(channel, 'itunes:image', href="https://i.imgur.com/pTMCfn9.png")

    for row in rows:
        base_title = row['title'].strip()
        pub_date = row['pubDate'].strip() or row['releaseDate'].strip()
        release_date = row['releaseDate'].strip()
        repeat_suffix = " - Repeat" if is_repeat(pub_date, release_date) else ""
        description = f"{row['description'].strip()}\n\nOriginally Aired: {release_date}"

        for clean_flag in [False, True]:
            if clean_flag and not row['clean']:
                continue
            item_element = SubElement(channel, 'item')
            clean_suffix = " (Clean)" if clean_flag else ""
            SubElement(item_element, 'title').text = f"{base_title}{repeat_suffix}{clean_suffix}"
            SubElement(item_element, 'link').text = f"{row['link']}{'?clean' if clean_flag else ''}"
            SubElement(item_element, 'itunes:episode').text = row['episode'].strip()
            SubElement(item_element, 'itunes:episodeType').text = "full"
            SubElement(item_element, 'itunes:explicit').text = "yes" if clean_flag else row['explicit'].strip() or "no"
            SubElement(item_element, 'description').text = description
            SubElement(item_element, 'pubDate').text = pub_date
            enclosure_url = row['clean'].strip() if clean_flag else row['enclosure'].strip()
            SubElement(item_element, 'enclosure', url=enclosure_url, type="audio/mpeg")

    tree = ElementTree(rss)
    tree.write(XML_FILE, encoding="utf-8", xml_declaration=True)
    print(f"Generated {XML_FILE} with {len(rows)} episodes")

if __name__ == "__main__":
    main()
