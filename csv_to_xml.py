import csv
import xml.etree.ElementTree as ET
from datetime import datetime
import email.utils
from dateutil import parser as date_parser

CSV_FILE = "tal_episodes.csv"
XML_FILE = "feed.xml"

ns_itunes = "http://www.itunes.com/dtds/podcast-1.0.dtd"

def parse_date(d):
    if not d:
        return datetime.min
    try:
        dt = date_parser.parse(d)
        if dt.tzinfo is None:
            dt = dt.replace(tzinfo=datetime.timezone.utc)
        return dt
    except Exception:
        return datetime.min

def add_item(channel, row, title_suffix="", link_suffix="", guid_suffix=""):
    item_element = ET.SubElement(channel, "item")
    title_text = row['title']
    if title_suffix:
        title_text += f" {title_suffix}"
    ET.SubElement(item_element, "title").text = title_text

    link_url = row['link']
    if link_suffix:
        link_url += link_suffix
    ET.SubElement(item_element, "link").text = link_url

    ET.SubElement(item_element, f"{{{ns_itunes}}}episode").text = row['episode']
    ET.SubElement(item_element, f"{{{ns_itunes}}}episodeType").text = "full"
    ET.SubElement(item_element, f"{{{ns_itunes}}}explicit").text = "yes" if row['clean'].strip() else "no"

    # Description with originally aired date
    desc_text = row['description'].strip()
    if row['releaseDate']:
        desc_text += f"\n\nOriginally Aired: {row['releaseDate']}"
    ET.SubElement(item_element, "description").text = desc_text

    # pubDate
    pub_date = row['pubDate'].strip() or row['releaseDate'].strip()
    if pub_date:
        try:
            parsed = date_parser.parse(pub_date)
            pub_date_rfc = email.utils.format_datetime(parsed)
        except Exception:
            pub_date_rfc = pub_date
    else:
        pub_date_rfc = ""
    ET.SubElement(item_element, "pubDate").text = pub_date_rfc

    # Enclosure
    enclosure_url = row['clean'] if row['clean'].strip() else row['enclosure']
    if enclosure_url:
        ET.SubElement(item_element, "enclosure", url=enclosure_url, type="audio/mpeg")

    # GUID
    guid_text = row['guid']
    if guid_suffix:
        guid_text += f"-{guid_suffix}"
    ET.SubElement(item_element, "guid").text = guid_text

def main():
    # Read CSV
    with open(CSV_FILE, newline="", encoding="utf-8") as f:
        reader = list(csv.DictReader(f))

    # Sort by pubDate/releaseDate descending
    def sort_key(r):
        dt_str = r['pubDate'].strip() or r['releaseDate'].strip()
        return parse_date(dt_str)
    rows = sorted(reader, key=sort_key, reverse=True)

    # Build XML
    rss = ET.Element("rss", version="2.0", attrib={"xmlns:itunes": ns_itunes})
    channel = ET.SubElement(rss, "channel")
    ET.SubElement(channel, "title").text = "This American Archive"
    ET.SubElement(channel, "link").text = "https://www.thisamericanlife.org"
    ET.SubElement(channel, "description").text = "Autogenerated feed of the This American Life archive."
    ET.SubElement(channel, "language").text = "en"
    ET.SubElement(channel, "copyright").text = "Copyright Â© Ira Glass / This American Life"
    ET.SubElement(channel, f"{{{ns_itunes}}}image", href="https://i.imgur.com/pTMCfn9.png")

    for row in rows:
        # Original episode
        add_item(channel, row)
        # Clean episode
        if row['clean'].strip():
            add_item(channel, row, title_suffix="(Clean)", link_suffix="?clean", guid_suffix="clean")

    # Write XML
    tree = ET.ElementTree(rss)
    tree.write(XML_FILE, encoding="utf-8", xml_declaration=True)

if __name__ == "__main__":
    main()
